[{"/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/index.js":"1","/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/routes/Home.js":"2","/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/routes/Detail.js":"3","/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/components/App.js":"4","/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/apollo.js":"5","/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/components/Movie.js":"6","/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/routes/Create.js":"7"},{"size":305,"mtime":1640841411452,"results":"8","hashOfConfig":"9"},{"size":2953,"mtime":1641993376601,"results":"10","hashOfConfig":"9"},{"size":619,"mtime":1640753273807,"results":"11","hashOfConfig":"9"},{"size":439,"mtime":1640839079614,"results":"12","hashOfConfig":"9"},{"size":808,"mtime":1641973632566,"results":"13","hashOfConfig":"9"},{"size":1937,"mtime":1640582844284,"results":"14","hashOfConfig":"9"},{"size":4561,"mtime":1641997634210,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1xfm8kp",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/index.js",[],["32","33"],"/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/routes/Home.js",[],"/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/routes/Detail.js",[],"/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/components/App.js",[],"/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/apollo.js",[],"/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/components/Movie.js",[],"/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/routes/Create.js",["34","35"],"import React, { useCallback, useRef, useState } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst _ = require(\"lodash\");\n\nconst CREATE_MOVIE = gql`\n  mutation getParams(\n    $id: String!\n    $title: String!\n    $rating: Float\n    $description_intro: String\n    $language: String\n    $medium_cover_image: String\n    $genres: [String]\n    $postedAt: String!\n    $updatedAt: String!\n  ) {\n    addMovie(\n      id: $id\n      title: $title\n      rating: $rating\n      description_intro: $description_intro\n      language: $language\n      medium_cover_image: $medium_cover_image\n      genres: $genres\n      postedAt: $postedAt\n      updatedAt: $updatedAt\n    ) {\n      id\n    }\n  }\n`;\n\nconst Create = (props) => {\n  const [onCreateMovie, { loading, error, data }] = useMutation(CREATE_MOVIE);\n  const [title, setTitle] = useState(\"\");\n  const [rating, setRating] = useState(\"0\");\n  const [description_intro, setDescription_intro] = useState(\"\");\n  const [language, setLanguage] = useState(\"en\");\n  const [medium_cover_image, setMedium_cover_image] = useState(\"\");\n  const [genres, setGenres] = useState([]);\n\n  const ratingMap = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"];\n  const languageMap = [\"en\", \"ko\", \"co\", \"jp\"];\n  const genresMap = [\"drama\", \"action\", \"comic\", \"romance\"];\n\n  function onCreate() {\n    onCreateMovie({\n      variables: {\n        id: uuidv4(),\n        title: title,\n        rating: Number(rating),\n        description_intro: description_intro,\n        language: language,\n        medium_cover_image: medium_cover_image,\n        genres: genres,\n        postedAt: String(new Date()),\n        updatedAt: String(new Date()),\n      },\n    });\n    setTitle(\"\");\n    setRating(\"0\");\n    setDescription_intro(\"\");\n    setLanguage(\"en\");\n    setMedium_cover_image(\"\");\n    setGenres([]);\n  }\n\n  console.log(\"create >>> \", loading, error, data);\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"영화명 입력\"\n          value={title}\n          onChange={(e) => {\n            setTitle(e.target.value);\n          }}\n        />\n      </div>\n      <div>\n        <textarea\n          minLength=\"3\"\n          placeholder=\"영화설명 입력\"\n          rows=\"6\"\n          value={description_intro}\n          onChange={(e) => {\n            setDescription_intro(e.target.value);\n          }}\n        />\n      </div>\n      <div>\n        <select\n          value={rating}\n          onChange={(e) => {\n            setRating(e.target.value);\n          }}\n        >\n          {ratingMap.map((rating, i) => {\n            return (\n              <option key={i} value={rating}>\n                {rating}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n      <div>\n        <select\n          value={language}\n          onChange={(e) => {\n            setLanguage(e.target.value);\n          }}\n        >\n          {languageMap.map((lang, i) => {\n            return (\n              <option key={i} value={lang}>\n                {lang}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n      <div>\n        {genresMap.map((_genres, i) => {\n          return (\n            <span key={i}>\n              <label htmlFor={_genres}>\n                <input\n                  type=\"checkbox\"\n                  id={_genres}\n                  checked={genres.includes(_genres)}\n                  onChange={(e) => {\n                    if (genres.includes(e.target.id)) {\n                      const index = genres.indexOf(e.target.id);\n                      let arr = genres;\n                      arr.splice(index, 1);\n                      setGenres(_.union(arr, genres));\n                    } else {\n                      let arr = [];\n                      arr.push(e.target.id);\n                      setGenres(_.union(arr, genres));\n                    }\n                  }}\n                />\n                {_genres}\n              </label>\n            </span>\n          );\n        })}\n      </div>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"영화포스터 이미지 링크 입력\"\n          value={medium_cover_image}\n          onChange={(e) => {\n            setMedium_cover_image(e.target.value);\n          }}\n        />\n      </div>\n      <div\n        onClick={() => {\n          onCreate();\n        }}\n      >\n        <span>create</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Create;\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":28},{"ruleId":"40","severity":1,"message":"44","line":1,"column":30,"nodeType":"42","messageId":"43","endLine":1,"endColumn":36},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation"]