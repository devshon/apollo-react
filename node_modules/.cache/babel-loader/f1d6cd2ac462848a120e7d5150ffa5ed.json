{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst graphql_tools_1 = require(\"graphql-tools\");\n\nconst applicator_1 = require(\"./applicator\");\n\nconst validation_1 = require(\"./validation\");\n\nconst fragments_1 = require(\"./fragments\");\n\nconst utils_1 = require(\"./utils\");\n/**\n *\n * @param schema\n * @param options\n * @param middleware\n *\n * Validates middleware and generates resolvers map for provided middleware.\n * Applies middleware to the current schema and returns the modified one.\n *\n */\n\n\nfunction addMiddlewareToSchema(schema, options, middleware) {\n  const validMiddleware = validation_1.validateMiddleware(schema, middleware);\n  const resolvers = applicator_1.generateResolverFromSchemaAndMiddleware(schema, options, validMiddleware);\n  const fragmentReplacements = fragments_1.extractFragmentReplacements(resolvers);\n  graphql_tools_1.addResolveFunctionsToSchema({\n    schema,\n    resolvers,\n    resolverValidationOptions: {\n      requireResolversForResolveType: false\n    }\n  });\n  return {\n    schema,\n    fragmentReplacements\n  };\n}\n\nexports.addMiddlewareToSchema = addMiddlewareToSchema;\n/**\n *\n * @param schema\n * @param options\n * @param middlewares\n *\n * Generates middleware from middleware generators and applies middleware to\n * resolvers. Returns generated schema with all provided middleware.\n *\n */\n\nfunction applyMiddlewareWithOptions(schema, options) {\n  for (var _len = arguments.length, middlewares = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    middlewares[_key - 2] = arguments[_key];\n  }\n\n  const normalisedMiddlewares = middlewares.map(middleware => {\n    if (utils_1.isMiddlewareGenerator(middleware)) {\n      return middleware.generate(schema);\n    } else {\n      return middleware;\n    }\n  });\n  const schemaWithMiddlewareAndFragmentReplacements = normalisedMiddlewares.reduceRight((_ref, middleware) => {\n    let {\n      schema: currentSchema,\n      fragmentReplacements: currentFragmentReplacements\n    } = _ref;\n    const {\n      schema: newSchema,\n      fragmentReplacements: newFragmentReplacements\n    } = addMiddlewareToSchema(currentSchema, options, middleware);\n    return {\n      schema: newSchema,\n      fragmentReplacements: [...currentFragmentReplacements, ...newFragmentReplacements]\n    };\n  }, {\n    schema,\n    fragmentReplacements: []\n  });\n  const schemaWithMiddleware = schemaWithMiddlewareAndFragmentReplacements.schema;\n  schemaWithMiddleware.schema = schemaWithMiddlewareAndFragmentReplacements.schema;\n  schemaWithMiddleware.fragmentReplacements = schemaWithMiddlewareAndFragmentReplacements.fragmentReplacements;\n  return schemaWithMiddleware;\n} // Exposed functions\n\n/**\n *\n * @param schema\n * @param middlewares\n *\n * Apply middleware to resolvers and return generated schema.\n *\n */\n\n\nfunction applyMiddleware(schema) {\n  for (var _len2 = arguments.length, middlewares = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    middlewares[_key2 - 1] = arguments[_key2];\n  }\n\n  return applyMiddlewareWithOptions(schema, {\n    onlyDeclaredResolvers: false\n  }, ...middlewares);\n}\n\nexports.applyMiddleware = applyMiddleware;\n/**\n *\n * @param schema\n * @param middlewares\n *\n * Apply middleware to declared resolvers and return new schema.\n *\n */\n\nfunction applyMiddlewareToDeclaredResolvers(schema) {\n  for (var _len3 = arguments.length, middlewares = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    middlewares[_key3 - 1] = arguments[_key3];\n  }\n\n  return applyMiddlewareWithOptions(schema, {\n    onlyDeclaredResolvers: true\n  }, ...middlewares);\n}\n\nexports.applyMiddlewareToDeclaredResolvers = applyMiddlewareToDeclaredResolvers;","map":{"version":3,"sources":["../src/middleware.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_tools_1 = require(\"graphql-tools\");\nconst applicator_1 = require(\"./applicator\");\nconst validation_1 = require(\"./validation\");\nconst fragments_1 = require(\"./fragments\");\nconst utils_1 = require(\"./utils\");\n/**\n *\n * @param schema\n * @param options\n * @param middleware\n *\n * Validates middleware and generates resolvers map for provided middleware.\n * Applies middleware to the current schema and returns the modified one.\n *\n */\nfunction addMiddlewareToSchema(schema, options, middleware) {\n    const validMiddleware = validation_1.validateMiddleware(schema, middleware);\n    const resolvers = applicator_1.generateResolverFromSchemaAndMiddleware(schema, options, validMiddleware);\n    const fragmentReplacements = fragments_1.extractFragmentReplacements(resolvers);\n    graphql_tools_1.addResolveFunctionsToSchema({\n        schema,\n        resolvers,\n        resolverValidationOptions: {\n            requireResolversForResolveType: false,\n        },\n    });\n    return { schema, fragmentReplacements };\n}\nexports.addMiddlewareToSchema = addMiddlewareToSchema;\n/**\n *\n * @param schema\n * @param options\n * @param middlewares\n *\n * Generates middleware from middleware generators and applies middleware to\n * resolvers. Returns generated schema with all provided middleware.\n *\n */\nfunction applyMiddlewareWithOptions(schema, options, ...middlewares) {\n    const normalisedMiddlewares = middlewares.map(middleware => {\n        if (utils_1.isMiddlewareGenerator(middleware)) {\n            return middleware.generate(schema);\n        }\n        else {\n            return middleware;\n        }\n    });\n    const schemaWithMiddlewareAndFragmentReplacements = normalisedMiddlewares.reduceRight(({ schema: currentSchema, fragmentReplacements: currentFragmentReplacements, }, middleware) => {\n        const { schema: newSchema, fragmentReplacements: newFragmentReplacements, } = addMiddlewareToSchema(currentSchema, options, middleware);\n        return {\n            schema: newSchema,\n            fragmentReplacements: [\n                ...currentFragmentReplacements,\n                ...newFragmentReplacements,\n            ],\n        };\n    }, { schema, fragmentReplacements: [] });\n    const schemaWithMiddleware = schemaWithMiddlewareAndFragmentReplacements.schema;\n    schemaWithMiddleware.schema =\n        schemaWithMiddlewareAndFragmentReplacements.schema;\n    schemaWithMiddleware.fragmentReplacements =\n        schemaWithMiddlewareAndFragmentReplacements.fragmentReplacements;\n    return schemaWithMiddleware;\n}\n// Exposed functions\n/**\n *\n * @param schema\n * @param middlewares\n *\n * Apply middleware to resolvers and return generated schema.\n *\n */\nfunction applyMiddleware(schema, ...middlewares) {\n    return applyMiddlewareWithOptions(schema, { onlyDeclaredResolvers: false }, ...middlewares);\n}\nexports.applyMiddleware = applyMiddleware;\n/**\n *\n * @param schema\n * @param middlewares\n *\n * Apply middleware to declared resolvers and return new schema.\n *\n */\nfunction applyMiddlewareToDeclaredResolvers(schema, ...middlewares) {\n    return applyMiddlewareWithOptions(schema, { onlyDeclaredResolvers: true }, ...middlewares);\n}\nexports.applyMiddlewareToDeclaredResolvers = applyMiddlewareToDeclaredResolvers;\n//# sourceMappingURL=middleware.js.map"]},"metadata":{},"sourceType":"script"}