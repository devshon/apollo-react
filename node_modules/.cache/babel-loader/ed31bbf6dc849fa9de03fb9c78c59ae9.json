{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"./utils\");\n\nfunction validateMiddleware(schema, middleware) {\n  if (utils_1.isMiddlewareFunction(middleware)) {\n    return middleware;\n  }\n\n  const types = schema.getTypeMap();\n  Object.keys(middleware).forEach(type => {\n    if (!Object.keys(types).includes(type)) {\n      throw new MiddlewareError(`Type ${type} exists in middleware but is missing in Schema.`);\n    }\n\n    if (!utils_1.isMiddlewareFunction(middleware[type])) {\n      const fields = types[type].getFields();\n      Object.keys(middleware[type]).forEach(field => {\n        if (!Object.keys(fields).includes(field)) {\n          throw new MiddlewareError(`Field ${type}.${field} exists in middleware but is missing in Schema.`);\n        }\n\n        if (!utils_1.isMiddlewareFunction(middleware[type][field])) {\n          throw new MiddlewareError(`Expected ${type}.${field} to be a function but found ` + typeof middleware[type][field]);\n        }\n      });\n    }\n  });\n  return middleware;\n}\n\nexports.validateMiddleware = validateMiddleware;\n\nclass MiddlewareError extends Error {}\n\nexports.MiddlewareError = MiddlewareError;","map":{"version":3,"sources":["../src/validation.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,SAAgB,kBAAhB,CACE,MADF,EAEE,UAFF,EAEmD;AAEjD,MAAI,OAAA,CAAA,oBAAA,CAAqB,UAArB,CAAJ,EAAsC;AACpC,WAAO,UAAP;AACD;;AAED,QAAM,KAAK,GAAG,MAAM,CAAC,UAAP,EAAd;AAEA,EAAA,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,OAAxB,CAAgC,IAAI,IAAG;AACrC,QAAI,CAAC,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,QAAnB,CAA4B,IAA5B,CAAL,EAAwC;AACtC,YAAM,IAAI,eAAJ,CACJ,QAAQ,IAAI,iDADR,CAAN;AAGD;;AAED,QAAI,CAAC,OAAA,CAAA,oBAAA,CAAqB,UAAU,CAAC,IAAD,CAA/B,CAAL,EAA6C;AAC3C,YAAM,MAAM,GAAI,KAAK,CAAC,IAAD,CAAL,CAEU,SAFV,EAAhB;AAIA,MAAA,MAAM,CAAC,IAAP,CAAY,UAAU,CAAC,IAAD,CAAtB,EAA8B,OAA9B,CAAsC,KAAK,IAAG;AAC5C,YAAI,CAAC,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,QAApB,CAA6B,KAA7B,CAAL,EAA0C;AACxC,gBAAM,IAAI,eAAJ,CACJ,SAAS,IAAI,IAAI,KAAK,iDADlB,CAAN;AAGD;;AAED,YAAI,CAAC,OAAA,CAAA,oBAAA,CAAqB,UAAU,CAAC,IAAD,CAAV,CAAiB,KAAjB,CAArB,CAAL,EAAoD;AAClD,gBAAM,IAAI,eAAJ,CACJ,YAAY,IAAI,IAAI,KAAK,8BAAzB,GACE,OAAO,UAAU,CAAC,IAAD,CAAV,CAAiB,KAAjB,CAFL,CAAN;AAID;AACF,OAbD;AAcD;AACF,GA3BD;AA6BA,SAAO,UAAP;AACD;;AAxCD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AA0CA,MAAa,eAAb,SAAqC,KAArC,CAA0C;;AAA1C,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"./utils\");\nfunction validateMiddleware(schema, middleware) {\n    if (utils_1.isMiddlewareFunction(middleware)) {\n        return middleware;\n    }\n    const types = schema.getTypeMap();\n    Object.keys(middleware).forEach(type => {\n        if (!Object.keys(types).includes(type)) {\n            throw new MiddlewareError(`Type ${type} exists in middleware but is missing in Schema.`);\n        }\n        if (!utils_1.isMiddlewareFunction(middleware[type])) {\n            const fields = types[type].getFields();\n            Object.keys(middleware[type]).forEach(field => {\n                if (!Object.keys(fields).includes(field)) {\n                    throw new MiddlewareError(`Field ${type}.${field} exists in middleware but is missing in Schema.`);\n                }\n                if (!utils_1.isMiddlewareFunction(middleware[type][field])) {\n                    throw new MiddlewareError(`Expected ${type}.${field} to be a function but found ` +\n                        typeof middleware[type][field]);\n                }\n            });\n        }\n    });\n    return middleware;\n}\nexports.validateMiddleware = validateMiddleware;\nclass MiddlewareError extends Error {\n}\nexports.MiddlewareError = MiddlewareError;\n//# sourceMappingURL=validation.js.map"]},"metadata":{},"sourceType":"script"}