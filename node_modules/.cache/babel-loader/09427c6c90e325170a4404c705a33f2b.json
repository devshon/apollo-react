{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar url = require(\"url\");\n\nvar apollo_server_core_1 = require(\"apollo-server-core\");\n\nvar GraphiQL = require(\"apollo-server-module-graphiql\");\n\nfunction graphqlExpress(options) {\n  if (!options) {\n    throw new Error('Apollo Server requires options.');\n  }\n\n  if (arguments.length > 1) {\n    throw new Error(\"Apollo Server expects exactly one argument, got \" + arguments.length);\n  }\n\n  var graphqlHandler = function (req, res, next) {\n    apollo_server_core_1.runHttpQuery([req, res], {\n      method: req.method,\n      options: options,\n      query: req.method === 'POST' ? req.body : req.query\n    }).then(function (gqlResponse) {\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Length', Buffer.byteLength(gqlResponse, 'utf8').toString());\n      res.write(gqlResponse);\n      res.end();\n    }, function (error) {\n      if ('HttpQueryError' !== error.name) {\n        return next(error);\n      }\n\n      if (error.headers) {\n        Object.keys(error.headers).forEach(function (header) {\n          res.setHeader(header, error.headers[header]);\n        });\n      }\n\n      res.statusCode = error.statusCode;\n      res.write(error.message);\n      res.end();\n    });\n  };\n\n  return graphqlHandler;\n}\n\nexports.graphqlExpress = graphqlExpress;\n\nfunction graphiqlExpress(options) {\n  var graphiqlHandler = function (req, res, next) {\n    var query = req.url && url.parse(req.url, true).query;\n    GraphiQL.resolveGraphiQLString(query, options, req).then(function (graphiqlString) {\n      res.setHeader('Content-Type', 'text/html');\n      res.write(graphiqlString);\n      res.end();\n    }, function (error) {\n      return next(error);\n    });\n  };\n\n  return graphiqlHandler;\n}\n\nexports.graphiqlExpress = graphiqlExpress;","map":{"version":3,"sources":["../src/expressApollo.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,GAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAKA,IAAA,QAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AAiBA,SAAA,cAAA,CACE,OADF,EACyD;AAEvD,MAAI,CAAC,OAAL,EAAc;AACZ,UAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,MAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AAExB,UAAM,IAAI,KAAJ,CACJ,qDAAmD,SAAS,CAAC,MADzD,CAAN;AAGD;;AAED,MAAM,cAAc,GAAG,UACrB,GADqB,EAErB,GAFqB,EAGrB,IAHqB,EAGjB;AAEJ,IAAA,oBAAA,CAAA,YAAA,CAAa,CAAC,GAAD,EAAM,GAAN,CAAb,EAAyB;AACvB,MAAA,MAAM,EAAE,GAAG,CAAC,MADW;AAEvB,MAAA,OAAO,EAAE,OAFc;AAGvB,MAAA,KAAK,EAAE,GAAG,CAAC,MAAJ,KAAe,MAAf,GAAwB,GAAG,CAAC,IAA5B,GAAmC,GAAG,CAAC;AAHvB,KAAzB,EAIG,IAJH,CAKE,UAAA,WAAA,EAAW;AACT,MAAA,GAAG,CAAC,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACA,MAAA,GAAG,CAAC,SAAJ,CACE,gBADF,EAEE,MAAM,CAAC,UAAP,CAAkB,WAAlB,EAA+B,MAA/B,EAAuC,QAAvC,EAFF;AAIA,MAAA,GAAG,CAAC,KAAJ,CAAU,WAAV;AACA,MAAA,GAAG,CAAC,GAAJ;AACD,KAbH,EAcE,UAAC,KAAD,EAAsB;AACpB,UAAI,qBAAqB,KAAK,CAAC,IAA/B,EAAqC;AACnC,eAAO,IAAI,CAAC,KAAD,CAAX;AACD;;AAED,UAAI,KAAK,CAAC,OAAV,EAAmB;AACjB,QAAA,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,OAAlB,EAA2B,OAA3B,CAAmC,UAAA,MAAA,EAAM;AACvC,UAAA,GAAG,CAAC,SAAJ,CAAc,MAAd,EAAsB,KAAK,CAAC,OAAN,CAAc,MAAd,CAAtB;AACD,SAFD;AAGD;;AAED,MAAA,GAAG,CAAC,UAAJ,GAAiB,KAAK,CAAC,UAAvB;AACA,MAAA,GAAG,CAAC,KAAJ,CAAU,KAAK,CAAC,OAAhB;AACA,MAAA,GAAG,CAAC,GAAJ;AACD,KA5BH;AA8BD,GAnCD;;AAqCA,SAAO,cAAP;AACD;;AApDD,OAAA,CAAA,cAAA,GAAA,cAAA;;AAuEA,SAAA,eAAA,CACE,OADF,EACiE;AAE/D,MAAM,eAAe,GAAG,UACtB,GADsB,EAEtB,GAFsB,EAGtB,IAHsB,EAGlB;AAEJ,QAAM,KAAK,GAAG,GAAG,CAAC,GAAJ,IAAW,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,GAAd,EAAmB,IAAnB,EAAyB,KAAlD;AACA,IAAA,QAAQ,CAAC,qBAAT,CAA+B,KAA/B,EAAsC,OAAtC,EAA+C,GAA/C,EAAoD,IAApD,CACE,UAAA,cAAA,EAAc;AACZ,MAAA,GAAG,CAAC,SAAJ,CAAc,cAAd,EAA8B,WAA9B;AACA,MAAA,GAAG,CAAC,KAAJ,CAAU,cAAV;AACA,MAAA,GAAG,CAAC,GAAJ;AACD,KALH,EAME,UAAA,KAAA,EAAK;AAAI,aAAA,IAAI,CAAJ,KAAI,CAAJ;AAAW,KANtB;AAQD,GAdD;;AAgBA,SAAO,eAAP;AACD;;AApBD,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar url = require(\"url\");\nvar apollo_server_core_1 = require(\"apollo-server-core\");\nvar GraphiQL = require(\"apollo-server-module-graphiql\");\nfunction graphqlExpress(options) {\n    if (!options) {\n        throw new Error('Apollo Server requires options.');\n    }\n    if (arguments.length > 1) {\n        throw new Error(\"Apollo Server expects exactly one argument, got \" + arguments.length);\n    }\n    var graphqlHandler = function (req, res, next) {\n        apollo_server_core_1.runHttpQuery([req, res], {\n            method: req.method,\n            options: options,\n            query: req.method === 'POST' ? req.body : req.query,\n        }).then(function (gqlResponse) {\n            res.setHeader('Content-Type', 'application/json');\n            res.setHeader('Content-Length', Buffer.byteLength(gqlResponse, 'utf8').toString());\n            res.write(gqlResponse);\n            res.end();\n        }, function (error) {\n            if ('HttpQueryError' !== error.name) {\n                return next(error);\n            }\n            if (error.headers) {\n                Object.keys(error.headers).forEach(function (header) {\n                    res.setHeader(header, error.headers[header]);\n                });\n            }\n            res.statusCode = error.statusCode;\n            res.write(error.message);\n            res.end();\n        });\n    };\n    return graphqlHandler;\n}\nexports.graphqlExpress = graphqlExpress;\nfunction graphiqlExpress(options) {\n    var graphiqlHandler = function (req, res, next) {\n        var query = req.url && url.parse(req.url, true).query;\n        GraphiQL.resolveGraphiQLString(query, options, req).then(function (graphiqlString) {\n            res.setHeader('Content-Type', 'text/html');\n            res.write(graphiqlString);\n            res.end();\n        }, function (error) { return next(error); });\n    };\n    return graphiqlHandler;\n}\nexports.graphiqlExpress = graphiqlExpress;\n//# sourceMappingURL=expressApollo.js.map"]},"metadata":{},"sourceType":"script"}