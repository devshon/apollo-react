{"ast":null,"code":"var _jsxFileName = \"/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/routes/Detail.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GET_MOVIE = gql`\n  query getById($id: String!) {\n    movie(id: $id) {\n      id\n      title\n      rating\n      description_intro\n      language\n      medium_cover_image\n      genres\n    }\n  }\n`;\n\nfunction Detail() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    loading,\n    data,\n    error\n  } = useQuery(GET_MOVIE, {\n    variables: {\n      id: id\n    }\n  });\n  console.log(loading, data, error);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 19\n    }, this), !loading && data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: data.movie.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: data.movie.description_intro\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: data.movie.language\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: data.movie.genres\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: data.movie.rating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: data.movie.title,\n        src: data.movie.medium_cover_image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"error 404\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Detail, \"qa/cOoXFm/77skMr+B5x7wKYStY=\", false, function () {\n  return [useParams, useQuery];\n});\n\n_c = Detail;\nexport default Detail;\n\nvar _c;\n\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"sources":["/Users/sonseongho/Desktop/workspace/react/react-web/apollo-react/src/routes/Detail.js"],"names":["React","gql","useQuery","useParams","GET_MOVIE","Detail","id","loading","data","error","variables","console","log","movie","title","description_intro","language","genres","rating","medium_cover_image"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,SAAT,QAA0B,kBAA1B;;;AAEA,MAAMC,SAAS,GAAGH,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;;AAcA,SAASI,MAAT,GAAkB;AAAA;;AAChB,QAAM;AAAEC,IAAAA;AAAF,MAASH,SAAS,EAAxB;AACA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA2BP,QAAQ,CAACE,SAAD,EAAY;AACnDM,IAAAA,SAAS,EAAE;AAAEJ,MAAAA,EAAE,EAAEA;AAAN;AADwC,GAAZ,CAAzC;AAGAK,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ,EAAqBC,IAArB,EAA2BC,KAA3B;AAEA,sBACE;AAAA,eACGF,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA,YADd,EAEG,CAACA,OAAD,IAAYC,IAAZ,iBACC;AAAA,8BACE;AAAA,kBAAOA,IAAI,CAACK,KAAL,CAAWC;AAAlB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAON,IAAI,CAACK,KAAL,CAAWE;AAAlB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,kBAAOP,IAAI,CAACK,KAAL,CAAWG;AAAlB;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,kBAAOR,IAAI,CAACK,KAAL,CAAWI;AAAlB;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA,kBAAOT,IAAI,CAACK,KAAL,CAAWK;AAAlB;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAK,QAAA,GAAG,EAAEV,IAAI,CAACK,KAAL,CAAWC,KAArB;AAA4B,QAAA,GAAG,EAAEN,IAAI,CAACK,KAAL,CAAWM;AAA5C;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,EAYGV,KAAK,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZZ;AAAA,kBADF;AAgBD;;GAvBQJ,M;UACQF,S,EACkBD,Q;;;KAF1BG,M;AAyBT,eAAeA,MAAf","sourcesContent":["import React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { useParams } from \"react-router-dom\";\n\nconst GET_MOVIE = gql`\n  query getById($id: String!) {\n    movie(id: $id) {\n      id\n      title\n      rating\n      description_intro\n      language\n      medium_cover_image\n      genres\n    }\n  }\n`;\n\nfunction Detail() {\n  const { id } = useParams();\n  const { loading, data, error } = useQuery(GET_MOVIE, {\n    variables: { id: id },\n  });\n  console.log(loading, data, error);\n\n  return (\n    <>\n      {loading && <div></div>}\n      {!loading && data && (\n        <div>\n          <span>{data.movie.title}</span>\n          <span>{data.movie.description_intro}</span>\n          <span>{data.movie.language}</span>\n          <span>{data.movie.genres}</span>\n          <span>{data.movie.rating}</span>\n          <img alt={data.movie.title} src={data.movie.medium_cover_image} />\n        </div>\n      )}\n      {error && <div>error 404</div>}\n    </>\n  );\n}\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}