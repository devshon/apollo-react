{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar graphql_extensions_1 = require(\"graphql-extensions\");\n\nvar apollo_tracing_1 = require(\"apollo-tracing\");\n\nvar apollo_cache_control_1 = require(\"apollo-cache-control\");\n\nvar LogAction;\n\n(function (LogAction) {\n  LogAction[LogAction[\"request\"] = 0] = \"request\";\n  LogAction[LogAction[\"parse\"] = 1] = \"parse\";\n  LogAction[LogAction[\"validation\"] = 2] = \"validation\";\n  LogAction[LogAction[\"execute\"] = 3] = \"execute\";\n})(LogAction = exports.LogAction || (exports.LogAction = {}));\n\nvar LogStep;\n\n(function (LogStep) {\n  LogStep[LogStep[\"start\"] = 0] = \"start\";\n  LogStep[LogStep[\"end\"] = 1] = \"end\";\n  LogStep[LogStep[\"status\"] = 2] = \"status\";\n})(LogStep = exports.LogStep || (exports.LogStep = {}));\n\nfunction runQuery(options) {\n  return Promise.resolve().then(function () {\n    return doRunQuery(options);\n  });\n}\n\nexports.runQuery = runQuery;\n\nfunction printStackTrace(error) {\n  console.error(error.stack);\n}\n\nfunction format(errors, formatter) {\n  return errors.map(function (error) {\n    if (formatter !== undefined) {\n      try {\n        return formatter(error);\n      } catch (err) {\n        console.error('Error in formatError function:', err);\n        var newError = new Error('Internal server error');\n        return graphql_1.formatError(newError);\n      }\n    } else {\n      return graphql_1.formatError(error);\n    }\n  });\n}\n\nfunction doRunQuery(options) {\n  var documentAST;\n\n  var logFunction = options.logFunction || function () {\n    return null;\n  };\n\n  var debugDefault = process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test';\n  var debug = options.debug !== undefined ? options.debug : debugDefault;\n  logFunction({\n    action: LogAction.request,\n    step: LogStep.start\n  });\n  var context = options.context || {};\n  var extensions = [];\n\n  if (options.tracing) {\n    extensions.push(apollo_tracing_1.TracingExtension);\n  }\n\n  if (options.cacheControl === true) {\n    extensions.push(apollo_cache_control_1.CacheControlExtension);\n  } else if (options.cacheControl) {\n    extensions.push(new apollo_cache_control_1.CacheControlExtension(options.cacheControl));\n  }\n\n  var extensionStack = extensions.length > 0 && new graphql_extensions_1.GraphQLExtensionStack(extensions);\n\n  if (extensionStack) {\n    context._extensionStack = extensionStack;\n    graphql_extensions_1.enableGraphQLExtensions(options.schema);\n    extensionStack.requestDidStart();\n  }\n\n  var qry = typeof options.query === 'string' ? options.query : graphql_1.print(options.query);\n  logFunction({\n    action: LogAction.request,\n    step: LogStep.status,\n    key: 'query',\n    data: qry\n  });\n  logFunction({\n    action: LogAction.request,\n    step: LogStep.status,\n    key: 'variables',\n    data: options.variables\n  });\n  logFunction({\n    action: LogAction.request,\n    step: LogStep.status,\n    key: 'operationName',\n    data: options.operationName\n  });\n\n  if (typeof options.query === 'string') {\n    try {\n      logFunction({\n        action: LogAction.parse,\n        step: LogStep.start\n      });\n      documentAST = graphql_1.parse(options.query);\n      logFunction({\n        action: LogAction.parse,\n        step: LogStep.end\n      });\n    } catch (syntaxError) {\n      logFunction({\n        action: LogAction.parse,\n        step: LogStep.end\n      });\n      return Promise.resolve({\n        errors: format([syntaxError], options.formatError)\n      });\n    }\n  } else {\n    documentAST = options.query;\n  }\n\n  if (options.skipValidation !== true) {\n    var rules = graphql_1.specifiedRules;\n\n    if (options.validationRules) {\n      rules = rules.concat(options.validationRules);\n    }\n\n    logFunction({\n      action: LogAction.validation,\n      step: LogStep.start\n    });\n    var validationErrors = graphql_1.validate(options.schema, documentAST, rules);\n    logFunction({\n      action: LogAction.validation,\n      step: LogStep.end\n    });\n\n    if (validationErrors.length) {\n      return Promise.resolve({\n        errors: format(validationErrors, options.formatError)\n      });\n    }\n  }\n\n  if (extensionStack) {\n    extensionStack.executionDidStart();\n  }\n\n  try {\n    logFunction({\n      action: LogAction.execute,\n      step: LogStep.start\n    });\n    return Promise.resolve(graphql_1.execute(options.schema, documentAST, options.rootValue, context, options.variables, options.operationName, options.fieldResolver)).then(function (result) {\n      logFunction({\n        action: LogAction.execute,\n        step: LogStep.end\n      });\n      logFunction({\n        action: LogAction.request,\n        step: LogStep.end\n      });\n      var response = {\n        data: result.data\n      };\n\n      if (result.errors) {\n        response.errors = format(result.errors, options.formatError);\n\n        if (debug) {\n          result.errors.map(printStackTrace);\n        }\n      }\n\n      if (extensionStack) {\n        extensionStack.executionDidEnd();\n        extensionStack.requestDidEnd();\n        response.extensions = extensionStack.format();\n      }\n\n      if (options.formatResponse) {\n        response = options.formatResponse(response, options);\n      }\n\n      return response;\n    });\n  } catch (executionError) {\n    logFunction({\n      action: LogAction.execute,\n      step: LogStep.end\n    });\n    logFunction({\n      action: LogAction.request,\n      step: LogStep.end\n    });\n    return Promise.resolve({\n      errors: format([executionError], options.formatError)\n    });\n  }\n}","map":{"version":3,"sources":["../src/runQuery.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar graphql_extensions_1 = require(\"graphql-extensions\");\nvar apollo_tracing_1 = require(\"apollo-tracing\");\nvar apollo_cache_control_1 = require(\"apollo-cache-control\");\nvar LogAction;\n(function (LogAction) {\n    LogAction[LogAction[\"request\"] = 0] = \"request\";\n    LogAction[LogAction[\"parse\"] = 1] = \"parse\";\n    LogAction[LogAction[\"validation\"] = 2] = \"validation\";\n    LogAction[LogAction[\"execute\"] = 3] = \"execute\";\n})(LogAction = exports.LogAction || (exports.LogAction = {}));\nvar LogStep;\n(function (LogStep) {\n    LogStep[LogStep[\"start\"] = 0] = \"start\";\n    LogStep[LogStep[\"end\"] = 1] = \"end\";\n    LogStep[LogStep[\"status\"] = 2] = \"status\";\n})(LogStep = exports.LogStep || (exports.LogStep = {}));\nfunction runQuery(options) {\n    return Promise.resolve().then(function () { return doRunQuery(options); });\n}\nexports.runQuery = runQuery;\nfunction printStackTrace(error) {\n    console.error(error.stack);\n}\nfunction format(errors, formatter) {\n    return errors.map(function (error) {\n        if (formatter !== undefined) {\n            try {\n                return formatter(error);\n            }\n            catch (err) {\n                console.error('Error in formatError function:', err);\n                var newError = new Error('Internal server error');\n                return graphql_1.formatError(newError);\n            }\n        }\n        else {\n            return graphql_1.formatError(error);\n        }\n    });\n}\nfunction doRunQuery(options) {\n    var documentAST;\n    var logFunction = options.logFunction ||\n        function () {\n            return null;\n        };\n    var debugDefault = process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test';\n    var debug = options.debug !== undefined ? options.debug : debugDefault;\n    logFunction({ action: LogAction.request, step: LogStep.start });\n    var context = options.context || {};\n    var extensions = [];\n    if (options.tracing) {\n        extensions.push(apollo_tracing_1.TracingExtension);\n    }\n    if (options.cacheControl === true) {\n        extensions.push(apollo_cache_control_1.CacheControlExtension);\n    }\n    else if (options.cacheControl) {\n        extensions.push(new apollo_cache_control_1.CacheControlExtension(options.cacheControl));\n    }\n    var extensionStack = extensions.length > 0 && new graphql_extensions_1.GraphQLExtensionStack(extensions);\n    if (extensionStack) {\n        context._extensionStack = extensionStack;\n        graphql_extensions_1.enableGraphQLExtensions(options.schema);\n        extensionStack.requestDidStart();\n    }\n    var qry = typeof options.query === 'string' ? options.query : graphql_1.print(options.query);\n    logFunction({\n        action: LogAction.request,\n        step: LogStep.status,\n        key: 'query',\n        data: qry,\n    });\n    logFunction({\n        action: LogAction.request,\n        step: LogStep.status,\n        key: 'variables',\n        data: options.variables,\n    });\n    logFunction({\n        action: LogAction.request,\n        step: LogStep.status,\n        key: 'operationName',\n        data: options.operationName,\n    });\n    if (typeof options.query === 'string') {\n        try {\n            logFunction({ action: LogAction.parse, step: LogStep.start });\n            documentAST = graphql_1.parse(options.query);\n            logFunction({ action: LogAction.parse, step: LogStep.end });\n        }\n        catch (syntaxError) {\n            logFunction({ action: LogAction.parse, step: LogStep.end });\n            return Promise.resolve({\n                errors: format([syntaxError], options.formatError),\n            });\n        }\n    }\n    else {\n        documentAST = options.query;\n    }\n    if (options.skipValidation !== true) {\n        var rules = graphql_1.specifiedRules;\n        if (options.validationRules) {\n            rules = rules.concat(options.validationRules);\n        }\n        logFunction({ action: LogAction.validation, step: LogStep.start });\n        var validationErrors = graphql_1.validate(options.schema, documentAST, rules);\n        logFunction({ action: LogAction.validation, step: LogStep.end });\n        if (validationErrors.length) {\n            return Promise.resolve({\n                errors: format(validationErrors, options.formatError),\n            });\n        }\n    }\n    if (extensionStack) {\n        extensionStack.executionDidStart();\n    }\n    try {\n        logFunction({ action: LogAction.execute, step: LogStep.start });\n        return Promise.resolve(graphql_1.execute(options.schema, documentAST, options.rootValue, context, options.variables, options.operationName, options.fieldResolver)).then(function (result) {\n            logFunction({ action: LogAction.execute, step: LogStep.end });\n            logFunction({ action: LogAction.request, step: LogStep.end });\n            var response = {\n                data: result.data,\n            };\n            if (result.errors) {\n                response.errors = format(result.errors, options.formatError);\n                if (debug) {\n                    result.errors.map(printStackTrace);\n                }\n            }\n            if (extensionStack) {\n                extensionStack.executionDidEnd();\n                extensionStack.requestDidEnd();\n                response.extensions = extensionStack.format();\n            }\n            if (options.formatResponse) {\n                response = options.formatResponse(response, options);\n            }\n            return response;\n        });\n    }\n    catch (executionError) {\n        logFunction({ action: LogAction.execute, step: LogStep.end });\n        logFunction({ action: LogAction.request, step: LogStep.end });\n        return Promise.resolve({\n            errors: format([executionError], options.formatError),\n        });\n    }\n}\n//# sourceMappingURL=runQuery.js.map"]},"metadata":{},"sourceType":"script"}