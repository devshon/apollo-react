{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0; // eslint-disable-next-line complexity\n\nconst inflate = (node, index, path) => {\n  if (Array.isArray(node)) {\n    return node.map(childNode => {\n      if (typeof childNode === 'string' || typeof childNode === 'number' || typeof childNode === 'boolean') {\n        return childNode;\n      } else {\n        return inflate(childNode, index, path);\n      }\n    });\n  } else {\n    if (node && node.id && node.__typename) {\n      const route = path.join(',');\n\n      if (index[route] && index[route][node.__typename] && index[route][node.__typename][node.id]) {\n        return index[route][node.__typename][node.id];\n      }\n\n      if (!index[route]) {\n        index[route] = {};\n      }\n\n      if (!index[route][node.__typename]) {\n        index[route][node.__typename] = {};\n      }\n\n      index[route][node.__typename][node.id] = node;\n    }\n\n    const fieldNames = Object.keys(node);\n    const result = {};\n\n    for (const fieldName of fieldNames) {\n      const value = node[fieldName];\n\n      if (Array.isArray(value) || typeof value === 'object' && value !== null) {\n        result[fieldName] = inflate(value, index, path.concat([fieldName]));\n      } else {\n        result[fieldName] = value;\n      }\n    }\n\n    return result;\n  }\n};\n\nvar _default = response => {\n  const index = {};\n  return inflate(response, index, []);\n};\n\nexports.default = _default;","map":{"version":3,"sources":["../src/inflate.js"],"names":["inflate","Array","childNode","node","route","path","index","fieldNames","Object","result","value","response"],"mappings":";;;;;0BAIA;;AACA,MAAMA,OAAO,GAAG,CAAA,IAAA,EAAA,KAAA,EAAA,IAAA,KAA2E;AACzF,MAAIC,KAAK,CAALA,OAAAA,CAAJ,IAAIA,CAAJ,EAAyB;AACvB,WAAO,IAAI,CAAJ,GAAA,CAAUC,SAAD,IAAe;AAC7B,UAAI,OAAA,SAAA,KAAA,QAAA,IAAiC,OAAA,SAAA,KAAjC,QAAA,IAAkE,OAAA,SAAA,KAAtE,SAAA,EAAsG;AACpG,eAAA,SAAA;AADF,OAAA,MAEO;AACL,eAAOF,OAAO,CAAA,SAAA,EAAA,KAAA,EAAd,IAAc,CAAd;AACD;AALH,KAAO,CAAP;AADF,GAAA,MAQO;AACL,QAAIG,IAAI,IAAIA,IAAI,CAAZA,EAAAA,IAAmBA,IAAI,CAA3B,UAAA,EAAwC;AACtC,YAAMC,KAAK,GAAGC,IAAI,CAAJA,IAAAA,CAAd,GAAcA,CAAd;;AAEA,UAAIC,KAAK,CAALA,KAAK,CAALA,IAAgBA,KAAK,CAALA,KAAK,CAALA,CAAaH,IAAI,CAAjCG,UAAgBA,CAAhBA,IAAiDA,KAAK,CAALA,KAAK,CAALA,CAAaH,IAAI,CAAjBG,UAAAA,EAA8BH,IAAI,CAAvF,EAAqDG,CAArD,EAA6F;AAC3F,eAAOA,KAAK,CAALA,KAAK,CAALA,CAAaH,IAAI,CAAjBG,UAAAA,EAA8BH,IAAI,CAAzC,EAAOG,CAAP;AACD;;AAED,UAAI,CAACA,KAAK,CAAV,KAAU,CAAV,EAAmB;AACjBA,QAAAA,KAAK,CAALA,KAAK,CAALA,GAAAA,EAAAA;AACD;;AAED,UAAI,CAACA,KAAK,CAALA,KAAK,CAALA,CAAaH,IAAI,CAAtB,UAAKG,CAAL,EAAoC;AAClCA,QAAAA,KAAK,CAALA,KAAK,CAALA,CAAaH,IAAI,CAAjBG,UAAAA,IAAAA,EAAAA;AACD;;AAEDA,MAAAA,KAAK,CAALA,KAAK,CAALA,CAAaH,IAAI,CAAjBG,UAAAA,EAA8BH,IAAI,CAAlCG,EAAAA,IAAAA,IAAAA;AACD;;AACD,UAAMC,UAAU,GAAGC,MAAM,CAANA,IAAAA,CAAnB,IAAmBA,CAAnB;AACA,UAAMC,MAAM,GAAZ,EAAA;;AACA,SAAK,MAAL,SAAA,IAAA,UAAA,EAAoC;AAClC,YAAMC,KAAK,GAAGP,IAAI,CAAlB,SAAkB,CAAlB;;AAEA,UAAIF,KAAK,CAALA,OAAAA,CAAAA,KAAAA,KAAwB,OAAA,KAAA,KAAA,QAAA,IAA6BS,KAAK,KAA9D,IAAA,EAAyE;AACvED,QAAAA,MAAM,CAANA,SAAM,CAANA,GAAoBT,OAAO,CAAA,KAAA,EAAA,KAAA,EAAeK,IAAI,CAAJA,MAAAA,CAAY,CAAtDI,SAAsD,CAAZJ,CAAf,CAA3BI;AADF,OAAA,MAEO;AACLA,QAAAA,MAAM,CAANA,SAAM,CAANA,GAAAA,KAAAA;AACD;AACF;;AAED,WAAA,MAAA;AACD;AAxCH,CAAA;;eA2CgBE,QAAD,IAAsB;AACnC,QAAML,KAAK,GAAX,EAAA;AAEA,SAAON,OAAO,CAAA,QAAA,EAAA,KAAA,EAAd,EAAc,CAAd","sourcesContent":["// @flow\n\ntype NodeType = Object | $ReadOnlyArray<NodeType>;\n\n// eslint-disable-next-line complexity\nconst inflate = (node: NodeType, index: Object, path: $ReadOnlyArray<string>): NodeType => {\n  if (Array.isArray(node)) {\n    return node.map((childNode) => {\n      if (typeof childNode === 'string' || typeof childNode === 'number' || typeof childNode === 'boolean') {\n        return childNode;\n      } else {\n        return inflate(childNode, index, path);\n      }\n    });\n  } else {\n    if (node && node.id && node.__typename) {\n      const route = path.join(',');\n\n      if (index[route] && index[route][node.__typename] && index[route][node.__typename][node.id]) {\n        return index[route][node.__typename][node.id];\n      }\n\n      if (!index[route]) {\n        index[route] = {};\n      }\n\n      if (!index[route][node.__typename]) {\n        index[route][node.__typename] = {};\n      }\n\n      index[route][node.__typename][node.id] = node;\n    }\n    const fieldNames = Object.keys(node);\n    const result = {};\n    for (const fieldName of fieldNames) {\n      const value = node[fieldName];\n\n      if (Array.isArray(value) || typeof value === 'object' && value !== null) {\n        result[fieldName] = inflate(value, index, path.concat([fieldName]));\n      } else {\n        result[fieldName] = value;\n      }\n    }\n\n    return result;\n  }\n};\n\nexport default (response: Object) => {\n  const index = {};\n\n  return inflate(response, index, []);\n};\n"]},"metadata":{},"sourceType":"script"}