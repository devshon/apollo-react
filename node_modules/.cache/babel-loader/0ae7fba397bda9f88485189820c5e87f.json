{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar GraphQLExtension =\n/** @class */\nfunction () {\n  function GraphQLExtension() {}\n\n  return GraphQLExtension;\n}();\n\nexports.GraphQLExtension = GraphQLExtension;\n\nvar GraphQLExtensionStack =\n/** @class */\nfunction () {\n  function GraphQLExtensionStack(extensions) {\n    this.extensions = extensions.map(function (extension) {\n      return typeof extension === 'function' ? new extension() : extension;\n    });\n  }\n\n  GraphQLExtensionStack.prototype.requestDidStart = function () {\n    for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n      var extension = _a[_i];\n\n      if (extension.requestDidStart) {\n        extension.requestDidStart();\n      }\n    }\n  };\n\n  GraphQLExtensionStack.prototype.parsingDidStart = function () {\n    for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n      var extension = _a[_i];\n\n      if (extension.parsingDidStart) {\n        extension.parsingDidStart();\n      }\n    }\n  };\n\n  GraphQLExtensionStack.prototype.parsingDidEnd = function () {\n    for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n      var extension = _a[_i];\n\n      if (extension.parsingDidEnd) {\n        extension.parsingDidEnd();\n      }\n    }\n  };\n\n  GraphQLExtensionStack.prototype.validationDidStart = function () {\n    for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n      var extension = _a[_i];\n\n      if (extension.validationDidStart) {\n        extension.validationDidStart();\n      }\n    }\n  };\n\n  GraphQLExtensionStack.prototype.validationDidEnd = function () {\n    for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n      var extension = _a[_i];\n\n      if (extension.validationDidEnd) {\n        extension.validationDidEnd();\n      }\n    }\n  };\n\n  GraphQLExtensionStack.prototype.executionDidStart = function () {\n    for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n      var extension = _a[_i];\n\n      if (extension.executionDidStart) {\n        extension.executionDidStart();\n      }\n    }\n  };\n\n  GraphQLExtensionStack.prototype.willResolveField = function (source, args, context, info) {\n    var handlers = this.extensions.map(function (extension) {\n      return extension.willResolveField && extension.willResolveField(source, args, context, info);\n    }).filter(function (x) {\n      return x;\n    });\n    return function (result) {\n      for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {\n        var handler = handlers_1[_i];\n        handler(result);\n      }\n    };\n  };\n\n  GraphQLExtensionStack.prototype.executionDidEnd = function () {\n    for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n      var extension = _a[_i];\n\n      if (extension.executionDidEnd) {\n        extension.executionDidEnd();\n      }\n    }\n  };\n\n  GraphQLExtensionStack.prototype.requestDidEnd = function () {\n    for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n      var extension = _a[_i];\n\n      if (extension.requestDidEnd) {\n        extension.requestDidEnd();\n      }\n    }\n  };\n\n  GraphQLExtensionStack.prototype.format = function () {\n    return this.extensions.map(function (extension) {\n      return extension.format && extension.format();\n    }).filter(function (x) {\n      return x;\n    }).reduce(function (extensions, _a) {\n      var key = _a[0],\n          value = _a[1];\n      return Object.assign(extensions, (_b = {}, _b[key] = value, _b));\n\n      var _b;\n    }, {});\n  };\n\n  return GraphQLExtensionStack;\n}();\n\nexports.GraphQLExtensionStack = GraphQLExtensionStack;\n\nfunction enableGraphQLExtensions(schema) {\n  if (schema._extensionsEnabled) {\n    return schema;\n  }\n\n  schema._extensionsEnabled = true;\n  forEachField(schema, wrapField);\n  return schema;\n}\n\nexports.enableGraphQLExtensions = enableGraphQLExtensions;\n\nfunction wrapField(field) {\n  var fieldResolver = field.resolve;\n\n  field.resolve = function (source, args, context, info) {\n    var extensionStack = context && context._extensionStack;\n    var handler = extensionStack && extensionStack.willResolveField(source, args, context, info); // If no resolver has been defined for a field, use the default field resolver\n    // (which matches the behavior of graphql-js when there is no explicit resolve function defined).\n    // TODO: Find a way to respect custom field resolvers, see https://github.com/graphql/graphql-js/pull/865\n\n    try {\n      var result_1 = (fieldResolver || graphql_1.defaultFieldResolver)(source, args, context, info);\n      whenResultIsFinished(result_1, function () {\n        handler && handler(result_1);\n      });\n      return result_1;\n    } catch (error) {\n      handler && handler();\n      throw error;\n    }\n  };\n}\n\nfunction whenResultIsFinished(result, callback) {\n  if (result === null || typeof result === 'undefined') {\n    callback();\n  } else if (typeof result.then === 'function') {\n    result.then(callback, callback);\n  } else if (Array.isArray(result)) {\n    var promises_1 = [];\n    result.forEach(function (value) {\n      if (value && typeof value.then === 'function') {\n        promises_1.push(value);\n      }\n    });\n\n    if (promises_1.length > 0) {\n      Promise.all(promises_1).then(callback, callback);\n    } else {\n      callback();\n    }\n  } else {\n    callback();\n  }\n}\n\nfunction forEachField(schema, fn) {\n  var typeMap = schema.getTypeMap();\n  Object.keys(typeMap).forEach(function (typeName) {\n    var type = typeMap[typeName];\n\n    if (!graphql_1.getNamedType(type).name.startsWith('__') && type instanceof graphql_1.GraphQLObjectType) {\n      var fields_1 = type.getFields();\n      Object.keys(fields_1).forEach(function (fieldName) {\n        var field = fields_1[fieldName];\n        fn(field, typeName, fieldName);\n      });\n    }\n  });\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar GraphQLExtension = /** @class */ (function () {\n    function GraphQLExtension() {\n    }\n    return GraphQLExtension;\n}());\nexports.GraphQLExtension = GraphQLExtension;\nvar GraphQLExtensionStack = /** @class */ (function () {\n    function GraphQLExtensionStack(extensions) {\n        this.extensions = extensions.map(function (extension) {\n            return typeof extension === 'function' ? new extension() : extension;\n        });\n    }\n    GraphQLExtensionStack.prototype.requestDidStart = function () {\n        for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n            var extension = _a[_i];\n            if (extension.requestDidStart) {\n                extension.requestDidStart();\n            }\n        }\n    };\n    GraphQLExtensionStack.prototype.parsingDidStart = function () {\n        for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n            var extension = _a[_i];\n            if (extension.parsingDidStart) {\n                extension.parsingDidStart();\n            }\n        }\n    };\n    GraphQLExtensionStack.prototype.parsingDidEnd = function () {\n        for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n            var extension = _a[_i];\n            if (extension.parsingDidEnd) {\n                extension.parsingDidEnd();\n            }\n        }\n    };\n    GraphQLExtensionStack.prototype.validationDidStart = function () {\n        for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n            var extension = _a[_i];\n            if (extension.validationDidStart) {\n                extension.validationDidStart();\n            }\n        }\n    };\n    GraphQLExtensionStack.prototype.validationDidEnd = function () {\n        for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n            var extension = _a[_i];\n            if (extension.validationDidEnd) {\n                extension.validationDidEnd();\n            }\n        }\n    };\n    GraphQLExtensionStack.prototype.executionDidStart = function () {\n        for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n            var extension = _a[_i];\n            if (extension.executionDidStart) {\n                extension.executionDidStart();\n            }\n        }\n    };\n    GraphQLExtensionStack.prototype.willResolveField = function (source, args, context, info) {\n        var handlers = this.extensions\n            .map(function (extension) { return extension.willResolveField && extension.willResolveField(source, args, context, info); })\n            .filter(function (x) { return x; });\n        return function (result) {\n            for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {\n                var handler = handlers_1[_i];\n                handler(result);\n            }\n        };\n    };\n    GraphQLExtensionStack.prototype.executionDidEnd = function () {\n        for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n            var extension = _a[_i];\n            if (extension.executionDidEnd) {\n                extension.executionDidEnd();\n            }\n        }\n    };\n    GraphQLExtensionStack.prototype.requestDidEnd = function () {\n        for (var _i = 0, _a = this.extensions; _i < _a.length; _i++) {\n            var extension = _a[_i];\n            if (extension.requestDidEnd) {\n                extension.requestDidEnd();\n            }\n        }\n    };\n    GraphQLExtensionStack.prototype.format = function () {\n        return this.extensions.map(function (extension) { return extension.format && extension.format(); }).filter(function (x) { return x; }).reduce(function (extensions, _a) {\n            var key = _a[0], value = _a[1];\n            return Object.assign(extensions, (_b = {}, _b[key] = value, _b));\n            var _b;\n        }, {});\n    };\n    return GraphQLExtensionStack;\n}());\nexports.GraphQLExtensionStack = GraphQLExtensionStack;\nfunction enableGraphQLExtensions(schema) {\n    if (schema._extensionsEnabled) {\n        return schema;\n    }\n    schema._extensionsEnabled = true;\n    forEachField(schema, wrapField);\n    return schema;\n}\nexports.enableGraphQLExtensions = enableGraphQLExtensions;\nfunction wrapField(field) {\n    var fieldResolver = field.resolve;\n    field.resolve = function (source, args, context, info) {\n        var extensionStack = context && context._extensionStack;\n        var handler = extensionStack && extensionStack.willResolveField(source, args, context, info);\n        // If no resolver has been defined for a field, use the default field resolver\n        // (which matches the behavior of graphql-js when there is no explicit resolve function defined).\n        // TODO: Find a way to respect custom field resolvers, see https://github.com/graphql/graphql-js/pull/865\n        try {\n            var result_1 = (fieldResolver || graphql_1.defaultFieldResolver)(source, args, context, info);\n            whenResultIsFinished(result_1, function () {\n                handler && handler(result_1);\n            });\n            return result_1;\n        }\n        catch (error) {\n            handler && handler();\n            throw error;\n        }\n    };\n}\nfunction whenResultIsFinished(result, callback) {\n    if (result === null || typeof result === 'undefined') {\n        callback();\n    }\n    else if (typeof result.then === 'function') {\n        result.then(callback, callback);\n    }\n    else if (Array.isArray(result)) {\n        var promises_1 = [];\n        result.forEach(function (value) {\n            if (value && typeof value.then === 'function') {\n                promises_1.push(value);\n            }\n        });\n        if (promises_1.length > 0) {\n            Promise.all(promises_1).then(callback, callback);\n        }\n        else {\n            callback();\n        }\n    }\n    else {\n        callback();\n    }\n}\nfunction forEachField(schema, fn) {\n    var typeMap = schema.getTypeMap();\n    Object.keys(typeMap).forEach(function (typeName) {\n        var type = typeMap[typeName];\n        if (!graphql_1.getNamedType(type).name.startsWith('__') && type instanceof graphql_1.GraphQLObjectType) {\n            var fields_1 = type.getFields();\n            Object.keys(fields_1).forEach(function (fieldName) {\n                var field = fields_1[fieldName];\n                fn(field, typeName, fieldName);\n            });\n        }\n    });\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}