{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"./utils\"); // Applicator\n\n\nfunction wrapResolverInMiddleware(resolver, middleware) {\n  return (parent, args, ctx, info) => middleware(function () {\n    let _parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : parent;\n\n    let _args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : args;\n\n    let _ctx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ctx;\n\n    let _info = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : info;\n\n    return resolver(_parent, _args, _ctx, _info);\n  }, parent, args, ctx, info);\n}\n\nfunction applyMiddlewareToField(field, options, middleware) {\n  if (utils_1.isMiddlewareWithFragment(middleware) && field.resolve) {\n    return Object.assign({}, field, {\n      fragment: middleware.fragment,\n      fragments: middleware.fragments,\n      resolve: wrapResolverInMiddleware(field.resolve, middleware.resolve)\n    });\n  } else if (utils_1.isMiddlewareWithFragment(middleware) && field.subscribe) {\n    return Object.assign({}, field, {\n      fragment: middleware.fragment,\n      fragments: middleware.fragments,\n      subscribe: wrapResolverInMiddleware(field.subscribe, middleware.resolve)\n    });\n  } else if (utils_1.isMiddlewareResolver(middleware) && field.resolve) {\n    return Object.assign({}, field, {\n      resolve: wrapResolverInMiddleware(field.resolve, middleware)\n    });\n  } else if (utils_1.isMiddlewareResolver(middleware) && field.subscribe) {\n    return Object.assign({}, field, {\n      subscribe: wrapResolverInMiddleware(field.subscribe, middleware)\n    });\n  } else if (utils_1.isMiddlewareWithFragment(middleware) && !options.onlyDeclaredResolvers) {\n    return Object.assign({}, field, {\n      fragment: middleware.fragment,\n      fragments: middleware.fragments,\n      resolve: wrapResolverInMiddleware(graphql_1.defaultFieldResolver, middleware.resolve)\n    });\n  } else if (utils_1.isMiddlewareResolver(middleware) && !options.onlyDeclaredResolvers) {\n    return Object.assign({}, field, {\n      resolve: wrapResolverInMiddleware(graphql_1.defaultFieldResolver, middleware)\n    });\n  } else {\n    return Object.assign({}, field, {\n      resolve: graphql_1.defaultFieldResolver\n    });\n  }\n}\n\nfunction applyMiddlewareToType(type, options, middleware) {\n  const fieldMap = type.getFields();\n\n  if (utils_1.isMiddlewareFunction(middleware)) {\n    const resolvers = Object.keys(fieldMap).reduce((resolvers, fieldName) => Object.assign({}, resolvers, {\n      [fieldName]: applyMiddlewareToField(fieldMap[fieldName], options, middleware)\n    }), {});\n    return resolvers;\n  } else {\n    const resolvers = Object.keys(middleware).reduce((resolvers, field) => Object.assign({}, resolvers, {\n      [field]: applyMiddlewareToField(fieldMap[field], options, middleware[field])\n    }), {});\n    return resolvers;\n  }\n}\n\nfunction applyMiddlewareToSchema(schema, options, middleware) {\n  const typeMap = schema.getTypeMap();\n  const resolvers = Object.keys(typeMap).filter(type => utils_1.isGraphQLObjectType(typeMap[type]) && !graphql_1.isIntrospectionType(typeMap[type])).reduce((resolvers, type) => Object.assign({}, resolvers, {\n    [type]: applyMiddlewareToType(typeMap[type], options, middleware)\n  }), {});\n  return resolvers;\n} // Generator\n\n\nfunction generateResolverFromSchemaAndMiddleware(schema, options, middleware) {\n  if (utils_1.isMiddlewareFunction(middleware)) {\n    return applyMiddlewareToSchema(schema, options, middleware);\n  } else {\n    const typeMap = schema.getTypeMap();\n    const resolvers = Object.keys(middleware).reduce((resolvers, type) => Object.assign({}, resolvers, {\n      [type]: applyMiddlewareToType(typeMap[type], options, middleware[type])\n    }), {});\n    return resolvers;\n  }\n}\n\nexports.generateResolverFromSchemaAndMiddleware = generateResolverFromSchemaAndMiddleware;","map":{"version":3,"sources":["../src/applicator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"./utils\");\n// Applicator\nfunction wrapResolverInMiddleware(resolver, middleware) {\n    return (parent, args, ctx, info) => middleware((_parent = parent, _args = args, _ctx = ctx, _info = info) => resolver(_parent, _args, _ctx, _info), parent, args, ctx, info);\n}\nfunction applyMiddlewareToField(field, options, middleware) {\n    if (utils_1.isMiddlewareWithFragment(middleware) && field.resolve) {\n        return Object.assign({}, field, { fragment: middleware.fragment, fragments: middleware.fragments, resolve: wrapResolverInMiddleware(field.resolve, middleware.resolve) });\n    }\n    else if (utils_1.isMiddlewareWithFragment(middleware) && field.subscribe) {\n        return Object.assign({}, field, { fragment: middleware.fragment, fragments: middleware.fragments, subscribe: wrapResolverInMiddleware(field.subscribe, middleware.resolve) });\n    }\n    else if (utils_1.isMiddlewareResolver(middleware) && field.resolve) {\n        return Object.assign({}, field, { resolve: wrapResolverInMiddleware(field.resolve, middleware) });\n    }\n    else if (utils_1.isMiddlewareResolver(middleware) && field.subscribe) {\n        return Object.assign({}, field, { subscribe: wrapResolverInMiddleware(field.subscribe, middleware) });\n    }\n    else if (utils_1.isMiddlewareWithFragment(middleware) &&\n        !options.onlyDeclaredResolvers) {\n        return Object.assign({}, field, { fragment: middleware.fragment, fragments: middleware.fragments, resolve: wrapResolverInMiddleware(graphql_1.defaultFieldResolver, middleware.resolve) });\n    }\n    else if (utils_1.isMiddlewareResolver(middleware) &&\n        !options.onlyDeclaredResolvers) {\n        return Object.assign({}, field, { resolve: wrapResolverInMiddleware(graphql_1.defaultFieldResolver, middleware) });\n    }\n    else {\n        return Object.assign({}, field, { resolve: graphql_1.defaultFieldResolver });\n    }\n}\nfunction applyMiddlewareToType(type, options, middleware) {\n    const fieldMap = type.getFields();\n    if (utils_1.isMiddlewareFunction(middleware)) {\n        const resolvers = Object.keys(fieldMap).reduce((resolvers, fieldName) => (Object.assign({}, resolvers, { [fieldName]: applyMiddlewareToField(fieldMap[fieldName], options, middleware) })), {});\n        return resolvers;\n    }\n    else {\n        const resolvers = Object.keys(middleware).reduce((resolvers, field) => (Object.assign({}, resolvers, { [field]: applyMiddlewareToField(fieldMap[field], options, middleware[field]) })), {});\n        return resolvers;\n    }\n}\nfunction applyMiddlewareToSchema(schema, options, middleware) {\n    const typeMap = schema.getTypeMap();\n    const resolvers = Object.keys(typeMap)\n        .filter(type => utils_1.isGraphQLObjectType(typeMap[type]) &&\n        !graphql_1.isIntrospectionType(typeMap[type]))\n        .reduce((resolvers, type) => (Object.assign({}, resolvers, { [type]: applyMiddlewareToType(typeMap[type], options, middleware) })), {});\n    return resolvers;\n}\n// Generator\nfunction generateResolverFromSchemaAndMiddleware(schema, options, middleware) {\n    if (utils_1.isMiddlewareFunction(middleware)) {\n        return applyMiddlewareToSchema(schema, options, middleware);\n    }\n    else {\n        const typeMap = schema.getTypeMap();\n        const resolvers = Object.keys(middleware).reduce((resolvers, type) => (Object.assign({}, resolvers, { [type]: applyMiddlewareToType(typeMap[type], options, middleware[type]) })), {});\n        return resolvers;\n    }\n}\nexports.generateResolverFromSchemaAndMiddleware = generateResolverFromSchemaAndMiddleware;\n//# sourceMappingURL=applicator.js.map"]},"metadata":{},"sourceType":"script"}