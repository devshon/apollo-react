{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar GRAPHIQL_VERSION = '0.11.11';\nvar SUBSCRIPTIONS_TRANSPORT_VERSION = '0.9.9';\n\nfunction safeSerialize(data) {\n  return data ? JSON.stringify(data).replace(/\\//g, '\\\\/') : null;\n}\n\nfunction renderGraphiQL(data) {\n  var endpointURL = data.endpointURL;\n  var endpointWs = endpointURL.startsWith('ws://') || endpointURL.startsWith('wss://');\n  var subscriptionsEndpoint = data.subscriptionsEndpoint;\n  var usingHttp = !endpointWs;\n  var usingWs = endpointWs || !!subscriptionsEndpoint;\n  var endpointURLWs = usingWs && (endpointWs ? endpointURL : subscriptionsEndpoint);\n  var queryString = data.query;\n  var variablesString = data.variables ? JSON.stringify(data.variables, null, 2) : null;\n  var resultString = null;\n  var operationName = data.operationName;\n  var passHeader = data.passHeader ? data.passHeader : '';\n  var editorTheme = data.editorTheme;\n  var usingEditorTheme = !!editorTheme;\n  var websocketConnectionParams = data.websocketConnectionParams || null;\n  var rewriteURL = !!data.rewriteURL;\n  return \"\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset=\\\"utf-8\\\" />\\n  <title>GraphiQL</title>\\n  <meta name=\\\"robots\\\" content=\\\"noindex\\\" />\\n  <style>\\n    html, body {\\n      height: 100%;\\n      margin: 0;\\n      overflow: hidden;\\n      width: 100%;\\n    }\\n  </style>\\n  <link href=\\\"//unpkg.com/graphiql@\" + GRAPHIQL_VERSION + \"/graphiql.css\\\" rel=\\\"stylesheet\\\" />\\n  <script src=\\\"//unpkg.com/react@15.6.1/dist/react.min.js\\\"></script>\\n  <script src=\\\"//unpkg.com/react-dom@15.6.1/dist/react-dom.min.js\\\"></script>\\n  <script src=\\\"//unpkg.com/graphiql@\" + GRAPHIQL_VERSION + \"/graphiql.min.js\\\"></script>\\n  \" + (usingEditorTheme ? \"<link href=\\\"//cdn.jsdelivr.net/npm/codemirror@5/theme/\" + editorTheme + \".min.css\\\" rel=\\\"stylesheet\\\" />\" : '') + \"\\n  \" + (usingHttp ? \"<script src=\\\"//cdn.jsdelivr.net/fetch/2.0.1/fetch.min.js\\\"></script>\" : '') + \"\\n  \" + (usingWs ? \"<script src=\\\"//unpkg.com/subscriptions-transport-ws@\" + SUBSCRIPTIONS_TRANSPORT_VERSION + \"/browser/client.js\\\"></script>\" : '') + \"\\n  \" + (usingWs && usingHttp ? '<script src=\"//unpkg.com/graphiql-subscriptions-fetcher@0.0.2/browser/client.js\"></script>' : '') + \"\\n\\n</head>\\n<body>\\n  <script>\\n    // Collect the URL parameters\\n    var parameters = {};\\n    window.location.search.substr(1).split('&').forEach(function (entry) {\\n      var eq = entry.indexOf('=');\\n      if (eq >= 0) {\\n        parameters[decodeURIComponent(entry.slice(0, eq))] =\\n          decodeURIComponent(entry.slice(eq + 1));\\n      }\\n    });\\n    // Produce a Location query string from a parameter object.\\n    function locationQuery(params, location) {\\n      return (location ? location: '') + '?' + Object.keys(params).map(function (key) {\\n        return encodeURIComponent(key) + '=' +\\n          encodeURIComponent(params[key]);\\n      }).join('&');\\n    }\\n    // Derive a fetch URL from the current URL, sans the GraphQL parameters.\\n    var graphqlParamNames = {\\n      query: true,\\n      variables: true,\\n      operationName: true\\n    };\\n    var otherParams = {};\\n    for (var k in parameters) {\\n      if (parameters.hasOwnProperty(k) && graphqlParamNames[k] !== true) {\\n        otherParams[k] = parameters[k];\\n      }\\n    }\\n\\n    \" + (usingWs ? \"\\n    var subscriptionsClient = new window.SubscriptionsTransportWs.SubscriptionClient('\" + endpointURLWs + \"', {\\n      reconnect: true\" + (websocketConnectionParams ? \",\\n      connectionParams: \" + JSON.stringify(websocketConnectionParams) : '') + \"\\n    });\\n\\n    var graphQLWSFetcher = subscriptionsClient.request.bind(subscriptionsClient);\\n    \" : '') + \"\\n\\n    \" + (usingHttp ? \"\\n      // We don't use safe-serialize for location, because it's not client input.\\n      var fetchURL = locationQuery(otherParams, '\" + endpointURL + \"');\\n\\n      // Defines a GraphQL fetcher using the fetch API.\\n      function graphQLHttpFetcher(graphQLParams) {\\n          return fetch(fetchURL, {\\n            method: 'post',\\n            headers: {\\n              'Accept': 'application/json',\\n              'Content-Type': 'application/json',\\n              \" + passHeader + \"\\n            },\\n            body: JSON.stringify(graphQLParams),\\n            credentials: 'same-origin',\\n          }).then(function (response) {\\n            return response.text();\\n          }).then(function (responseBody) {\\n            try {\\n              return JSON.parse(responseBody);\\n            } catch (error) {\\n              return responseBody;\\n            }\\n          });\\n      }\\n    \" : '') + \"\\n\\n    \" + (usingWs && usingHttp ? \"\\n      var fetcher =\\n        window.GraphiQLSubscriptionsFetcher.graphQLFetcher(subscriptionsClient, graphQLHttpFetcher);\\n    \" : \"\\n      var fetcher = \" + (usingWs ? 'graphQLWSFetcher' : 'graphQLHttpFetcher') + \";\\n    \") + \"\\n\\n    // When the query and variables string is edited, update the URL bar so\\n    // that it can be easily shared.\\n    function onEditQuery(newQuery) {\\n      parameters.query = newQuery;\\n      \" + (rewriteURL ? 'updateURL();' : '') + \"\\n    }\\n    function onEditVariables(newVariables) {\\n      parameters.variables = newVariables;\\n      \" + (rewriteURL ? 'updateURL();' : '') + \"\\n    }\\n    function onEditOperationName(newOperationName) {\\n      parameters.operationName = newOperationName;\\n      \" + (rewriteURL ? 'updateURL();' : '') + \"\\n    }\\n    function updateURL() {\\n      var cleanParams = Object.keys(parameters).filter(function(v) {\\n        return parameters[v];\\n      }).reduce(function(old, v) {\\n        old[v] = parameters[v];\\n        return old;\\n      }, {});\\n\\n      history.replaceState(null, null, locationQuery(cleanParams) + window.location.hash);\\n    }\\n    // Render <GraphiQL /> into the body.\\n    ReactDOM.render(\\n      React.createElement(GraphiQL, {\\n        fetcher: fetcher,\\n        onEditQuery: onEditQuery,\\n        onEditVariables: onEditVariables,\\n        onEditOperationName: onEditOperationName,\\n        query: \" + safeSerialize(queryString) + \",\\n        response: \" + safeSerialize(resultString) + \",\\n        variables: \" + safeSerialize(variablesString) + \",\\n        operationName: \" + safeSerialize(operationName) + \",\\n        editorTheme: \" + safeSerialize(editorTheme) + \",\\n        websocketConnectionParams: \" + safeSerialize(websocketConnectionParams) + \",\\n      }),\\n      document.body\\n    );\\n  </script>\\n</body>\\n</html>\";\n}\n\nexports.renderGraphiQL = renderGraphiQL;","map":{"version":3,"sources":["../src/renderGraphiQL.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar GRAPHIQL_VERSION = '0.11.11';\nvar SUBSCRIPTIONS_TRANSPORT_VERSION = '0.9.9';\nfunction safeSerialize(data) {\n    return data ? JSON.stringify(data).replace(/\\//g, '\\\\/') : null;\n}\nfunction renderGraphiQL(data) {\n    var endpointURL = data.endpointURL;\n    var endpointWs = endpointURL.startsWith('ws://') || endpointURL.startsWith('wss://');\n    var subscriptionsEndpoint = data.subscriptionsEndpoint;\n    var usingHttp = !endpointWs;\n    var usingWs = endpointWs || !!subscriptionsEndpoint;\n    var endpointURLWs = usingWs && (endpointWs ? endpointURL : subscriptionsEndpoint);\n    var queryString = data.query;\n    var variablesString = data.variables\n        ? JSON.stringify(data.variables, null, 2)\n        : null;\n    var resultString = null;\n    var operationName = data.operationName;\n    var passHeader = data.passHeader ? data.passHeader : '';\n    var editorTheme = data.editorTheme;\n    var usingEditorTheme = !!editorTheme;\n    var websocketConnectionParams = data.websocketConnectionParams || null;\n    var rewriteURL = !!data.rewriteURL;\n    return \"\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset=\\\"utf-8\\\" />\\n  <title>GraphiQL</title>\\n  <meta name=\\\"robots\\\" content=\\\"noindex\\\" />\\n  <style>\\n    html, body {\\n      height: 100%;\\n      margin: 0;\\n      overflow: hidden;\\n      width: 100%;\\n    }\\n  </style>\\n  <link href=\\\"//unpkg.com/graphiql@\" + GRAPHIQL_VERSION + \"/graphiql.css\\\" rel=\\\"stylesheet\\\" />\\n  <script src=\\\"//unpkg.com/react@15.6.1/dist/react.min.js\\\"></script>\\n  <script src=\\\"//unpkg.com/react-dom@15.6.1/dist/react-dom.min.js\\\"></script>\\n  <script src=\\\"//unpkg.com/graphiql@\" + GRAPHIQL_VERSION + \"/graphiql.min.js\\\"></script>\\n  \" + (usingEditorTheme\n        ? \"<link href=\\\"//cdn.jsdelivr.net/npm/codemirror@5/theme/\" + editorTheme + \".min.css\\\" rel=\\\"stylesheet\\\" />\"\n        : '') + \"\\n  \" + (usingHttp\n        ? \"<script src=\\\"//cdn.jsdelivr.net/fetch/2.0.1/fetch.min.js\\\"></script>\"\n        : '') + \"\\n  \" + (usingWs\n        ? \"<script src=\\\"//unpkg.com/subscriptions-transport-ws@\" + SUBSCRIPTIONS_TRANSPORT_VERSION + \"/browser/client.js\\\"></script>\"\n        : '') + \"\\n  \" + (usingWs && usingHttp\n        ? '<script src=\"//unpkg.com/graphiql-subscriptions-fetcher@0.0.2/browser/client.js\"></script>'\n        : '') + \"\\n\\n</head>\\n<body>\\n  <script>\\n    // Collect the URL parameters\\n    var parameters = {};\\n    window.location.search.substr(1).split('&').forEach(function (entry) {\\n      var eq = entry.indexOf('=');\\n      if (eq >= 0) {\\n        parameters[decodeURIComponent(entry.slice(0, eq))] =\\n          decodeURIComponent(entry.slice(eq + 1));\\n      }\\n    });\\n    // Produce a Location query string from a parameter object.\\n    function locationQuery(params, location) {\\n      return (location ? location: '') + '?' + Object.keys(params).map(function (key) {\\n        return encodeURIComponent(key) + '=' +\\n          encodeURIComponent(params[key]);\\n      }).join('&');\\n    }\\n    // Derive a fetch URL from the current URL, sans the GraphQL parameters.\\n    var graphqlParamNames = {\\n      query: true,\\n      variables: true,\\n      operationName: true\\n    };\\n    var otherParams = {};\\n    for (var k in parameters) {\\n      if (parameters.hasOwnProperty(k) && graphqlParamNames[k] !== true) {\\n        otherParams[k] = parameters[k];\\n      }\\n    }\\n\\n    \" + (usingWs\n        ? \"\\n    var subscriptionsClient = new window.SubscriptionsTransportWs.SubscriptionClient('\" + endpointURLWs + \"', {\\n      reconnect: true\" + (websocketConnectionParams\n            ? \",\\n      connectionParams: \" + JSON.stringify(websocketConnectionParams)\n            : '') + \"\\n    });\\n\\n    var graphQLWSFetcher = subscriptionsClient.request.bind(subscriptionsClient);\\n    \"\n        : '') + \"\\n\\n    \" + (usingHttp\n        ? \"\\n      // We don't use safe-serialize for location, because it's not client input.\\n      var fetchURL = locationQuery(otherParams, '\" + endpointURL + \"');\\n\\n      // Defines a GraphQL fetcher using the fetch API.\\n      function graphQLHttpFetcher(graphQLParams) {\\n          return fetch(fetchURL, {\\n            method: 'post',\\n            headers: {\\n              'Accept': 'application/json',\\n              'Content-Type': 'application/json',\\n              \" + passHeader + \"\\n            },\\n            body: JSON.stringify(graphQLParams),\\n            credentials: 'same-origin',\\n          }).then(function (response) {\\n            return response.text();\\n          }).then(function (responseBody) {\\n            try {\\n              return JSON.parse(responseBody);\\n            } catch (error) {\\n              return responseBody;\\n            }\\n          });\\n      }\\n    \"\n        : '') + \"\\n\\n    \" + (usingWs && usingHttp\n        ? \"\\n      var fetcher =\\n        window.GraphiQLSubscriptionsFetcher.graphQLFetcher(subscriptionsClient, graphQLHttpFetcher);\\n    \"\n        : \"\\n      var fetcher = \" + (usingWs ? 'graphQLWSFetcher' : 'graphQLHttpFetcher') + \";\\n    \") + \"\\n\\n    // When the query and variables string is edited, update the URL bar so\\n    // that it can be easily shared.\\n    function onEditQuery(newQuery) {\\n      parameters.query = newQuery;\\n      \" + (rewriteURL ? 'updateURL();' : '') + \"\\n    }\\n    function onEditVariables(newVariables) {\\n      parameters.variables = newVariables;\\n      \" + (rewriteURL ? 'updateURL();' : '') + \"\\n    }\\n    function onEditOperationName(newOperationName) {\\n      parameters.operationName = newOperationName;\\n      \" + (rewriteURL ? 'updateURL();' : '') + \"\\n    }\\n    function updateURL() {\\n      var cleanParams = Object.keys(parameters).filter(function(v) {\\n        return parameters[v];\\n      }).reduce(function(old, v) {\\n        old[v] = parameters[v];\\n        return old;\\n      }, {});\\n\\n      history.replaceState(null, null, locationQuery(cleanParams) + window.location.hash);\\n    }\\n    // Render <GraphiQL /> into the body.\\n    ReactDOM.render(\\n      React.createElement(GraphiQL, {\\n        fetcher: fetcher,\\n        onEditQuery: onEditQuery,\\n        onEditVariables: onEditVariables,\\n        onEditOperationName: onEditOperationName,\\n        query: \" + safeSerialize(queryString) + \",\\n        response: \" + safeSerialize(resultString) + \",\\n        variables: \" + safeSerialize(variablesString) + \",\\n        operationName: \" + safeSerialize(operationName) + \",\\n        editorTheme: \" + safeSerialize(editorTheme) + \",\\n        websocketConnectionParams: \" + safeSerialize(websocketConnectionParams) + \",\\n      }),\\n      document.body\\n    );\\n  </script>\\n</body>\\n</html>\";\n}\nexports.renderGraphiQL = renderGraphiQL;\n//# sourceMappingURL=renderGraphiQL.js.map"]},"metadata":{},"sourceType":"script"}