{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [0, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar runQuery_1 = require(\"./runQuery\");\n\nvar graphqlOptions_1 = require(\"./graphqlOptions\");\n\nvar HttpQueryError = function (_super) {\n  __extends(HttpQueryError, _super);\n\n  function HttpQueryError(statusCode, message, isGraphQLError, headers) {\n    if (isGraphQLError === void 0) {\n      isGraphQLError = false;\n    }\n\n    var _this = _super.call(this, message) || this;\n\n    _this.name = 'HttpQueryError';\n    _this.statusCode = statusCode;\n    _this.isGraphQLError = isGraphQLError;\n    _this.headers = headers;\n    return _this;\n  }\n\n  return HttpQueryError;\n}(Error);\n\nexports.HttpQueryError = HttpQueryError;\n\nfunction isQueryOperation(query, operationName) {\n  var operationAST = graphql_1.getOperationAST(query, operationName);\n  return operationAST.operation === 'query';\n}\n\nfunction runHttpQuery(handlerArguments, request) {\n  return __awaiter(this, void 0, void 0, function () {\n    var isGetRequest, optionsObject, e_1, formatErrorFn, requestPayload, isBatch, requests, responses, gqlResponse;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          isGetRequest = false;\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4, graphqlOptions_1.resolveGraphqlOptions.apply(void 0, [request.options].concat(handlerArguments))];\n\n        case 2:\n          optionsObject = _a.sent();\n          return [3, 4];\n\n        case 3:\n          e_1 = _a.sent();\n          throw new HttpQueryError(500, e_1.message);\n\n        case 4:\n          formatErrorFn = optionsObject.formatError || graphql_1.formatError;\n\n          switch (request.method) {\n            case 'POST':\n              if (!request.query || Object.keys(request.query).length === 0) {\n                throw new HttpQueryError(500, 'POST body missing. Did you forget use body-parser middleware?');\n              }\n\n              requestPayload = request.query;\n              break;\n\n            case 'GET':\n              if (!request.query || Object.keys(request.query).length === 0) {\n                throw new HttpQueryError(400, 'GET query missing.');\n              }\n\n              isGetRequest = true;\n              requestPayload = request.query;\n              break;\n\n            default:\n              throw new HttpQueryError(405, 'Apollo Server supports only GET/POST requests.', false, {\n                Allow: 'GET, POST'\n              });\n          }\n\n          isBatch = true;\n\n          if (!Array.isArray(requestPayload)) {\n            isBatch = false;\n            requestPayload = [requestPayload];\n          }\n\n          requests = requestPayload.map(function (requestParams) {\n            try {\n              var query = requestParams.query;\n              var extensions = requestParams.extensions;\n\n              if (isGetRequest && extensions) {\n                try {\n                  extensions = JSON.parse(extensions);\n                } catch (error) {\n                  throw new HttpQueryError(400, 'Extensions are invalid JSON.');\n                }\n              }\n\n              if (query === undefined && extensions && extensions.persistedQuery) {\n                throw new HttpQueryError(200, JSON.stringify({\n                  errors: [{\n                    message: 'PersistedQueryNotSupported'\n                  }]\n                }), true, {\n                  'Content-Type': 'application/json'\n                });\n              }\n\n              if (isGetRequest) {\n                if (typeof query === 'string') {\n                  query = graphql_1.parse(query);\n                } else if (!query) {\n                  throw new HttpQueryError(400, 'Must provide query string.');\n                }\n\n                if (!isQueryOperation(query, requestParams.operationName)) {\n                  throw new HttpQueryError(405, \"GET supports only query operation\", false, {\n                    Allow: 'POST'\n                  });\n                }\n              }\n\n              var operationName = requestParams.operationName;\n              var variables = requestParams.variables;\n\n              if (typeof variables === 'string') {\n                try {\n                  variables = JSON.parse(variables);\n                } catch (error) {\n                  throw new HttpQueryError(400, 'Variables are invalid JSON.');\n                }\n              }\n\n              var context_1 = optionsObject.context || {};\n\n              if (typeof context_1 === 'function') {\n                context_1 = context_1();\n              } else if (isBatch) {\n                context_1 = Object.assign(Object.create(Object.getPrototypeOf(context_1)), context_1);\n              }\n\n              var params = {\n                schema: optionsObject.schema,\n                query: query,\n                variables: variables,\n                context: context_1,\n                rootValue: optionsObject.rootValue,\n                operationName: operationName,\n                logFunction: optionsObject.logFunction,\n                validationRules: optionsObject.validationRules,\n                formatError: formatErrorFn,\n                formatResponse: optionsObject.formatResponse,\n                fieldResolver: optionsObject.fieldResolver,\n                debug: optionsObject.debug,\n                tracing: optionsObject.tracing,\n                cacheControl: optionsObject.cacheControl\n              };\n\n              if (optionsObject.formatParams) {\n                params = optionsObject.formatParams(params);\n              }\n\n              return runQuery_1.runQuery(params);\n            } catch (e) {\n              if (e.name === 'HttpQueryError') {\n                return Promise.reject(e);\n              }\n\n              return Promise.resolve({\n                errors: [formatErrorFn(e)]\n              });\n            }\n          });\n          return [4, Promise.all(requests)];\n\n        case 5:\n          responses = _a.sent();\n\n          if (!isBatch) {\n            gqlResponse = responses[0];\n\n            if (gqlResponse.errors && typeof gqlResponse.data === 'undefined') {\n              throw new HttpQueryError(400, JSON.stringify(gqlResponse), true, {\n                'Content-Type': 'application/json'\n              });\n            }\n\n            return [2, JSON.stringify(gqlResponse)];\n          }\n\n          return [2, JSON.stringify(responses)];\n      }\n    });\n  });\n}\n\nexports.runHttpQuery = runHttpQuery;","map":{"version":3,"sources":["../src/runHttpQuery.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar runQuery_1 = require(\"./runQuery\");\nvar graphqlOptions_1 = require(\"./graphqlOptions\");\nvar HttpQueryError = (function (_super) {\n    __extends(HttpQueryError, _super);\n    function HttpQueryError(statusCode, message, isGraphQLError, headers) {\n        if (isGraphQLError === void 0) { isGraphQLError = false; }\n        var _this = _super.call(this, message) || this;\n        _this.name = 'HttpQueryError';\n        _this.statusCode = statusCode;\n        _this.isGraphQLError = isGraphQLError;\n        _this.headers = headers;\n        return _this;\n    }\n    return HttpQueryError;\n}(Error));\nexports.HttpQueryError = HttpQueryError;\nfunction isQueryOperation(query, operationName) {\n    var operationAST = graphql_1.getOperationAST(query, operationName);\n    return operationAST.operation === 'query';\n}\nfunction runHttpQuery(handlerArguments, request) {\n    return __awaiter(this, void 0, void 0, function () {\n        var isGetRequest, optionsObject, e_1, formatErrorFn, requestPayload, isBatch, requests, responses, gqlResponse;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    isGetRequest = false;\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, , 4]);\n                    return [4, graphqlOptions_1.resolveGraphqlOptions.apply(void 0, [request.options].concat(handlerArguments))];\n                case 2:\n                    optionsObject = _a.sent();\n                    return [3, 4];\n                case 3:\n                    e_1 = _a.sent();\n                    throw new HttpQueryError(500, e_1.message);\n                case 4:\n                    formatErrorFn = optionsObject.formatError || graphql_1.formatError;\n                    switch (request.method) {\n                        case 'POST':\n                            if (!request.query || Object.keys(request.query).length === 0) {\n                                throw new HttpQueryError(500, 'POST body missing. Did you forget use body-parser middleware?');\n                            }\n                            requestPayload = request.query;\n                            break;\n                        case 'GET':\n                            if (!request.query || Object.keys(request.query).length === 0) {\n                                throw new HttpQueryError(400, 'GET query missing.');\n                            }\n                            isGetRequest = true;\n                            requestPayload = request.query;\n                            break;\n                        default:\n                            throw new HttpQueryError(405, 'Apollo Server supports only GET/POST requests.', false, {\n                                Allow: 'GET, POST',\n                            });\n                    }\n                    isBatch = true;\n                    if (!Array.isArray(requestPayload)) {\n                        isBatch = false;\n                        requestPayload = [requestPayload];\n                    }\n                    requests = requestPayload.map(function (requestParams) {\n                        try {\n                            var query = requestParams.query;\n                            var extensions = requestParams.extensions;\n                            if (isGetRequest && extensions) {\n                                try {\n                                    extensions = JSON.parse(extensions);\n                                }\n                                catch (error) {\n                                    throw new HttpQueryError(400, 'Extensions are invalid JSON.');\n                                }\n                            }\n                            if (query === undefined && extensions && extensions.persistedQuery) {\n                                throw new HttpQueryError(200, JSON.stringify({\n                                    errors: [\n                                        {\n                                            message: 'PersistedQueryNotSupported',\n                                        },\n                                    ],\n                                }), true, {\n                                    'Content-Type': 'application/json',\n                                });\n                            }\n                            if (isGetRequest) {\n                                if (typeof query === 'string') {\n                                    query = graphql_1.parse(query);\n                                }\n                                else if (!query) {\n                                    throw new HttpQueryError(400, 'Must provide query string.');\n                                }\n                                if (!isQueryOperation(query, requestParams.operationName)) {\n                                    throw new HttpQueryError(405, \"GET supports only query operation\", false, {\n                                        Allow: 'POST',\n                                    });\n                                }\n                            }\n                            var operationName = requestParams.operationName;\n                            var variables = requestParams.variables;\n                            if (typeof variables === 'string') {\n                                try {\n                                    variables = JSON.parse(variables);\n                                }\n                                catch (error) {\n                                    throw new HttpQueryError(400, 'Variables are invalid JSON.');\n                                }\n                            }\n                            var context_1 = optionsObject.context || {};\n                            if (typeof context_1 === 'function') {\n                                context_1 = context_1();\n                            }\n                            else if (isBatch) {\n                                context_1 = Object.assign(Object.create(Object.getPrototypeOf(context_1)), context_1);\n                            }\n                            var params = {\n                                schema: optionsObject.schema,\n                                query: query,\n                                variables: variables,\n                                context: context_1,\n                                rootValue: optionsObject.rootValue,\n                                operationName: operationName,\n                                logFunction: optionsObject.logFunction,\n                                validationRules: optionsObject.validationRules,\n                                formatError: formatErrorFn,\n                                formatResponse: optionsObject.formatResponse,\n                                fieldResolver: optionsObject.fieldResolver,\n                                debug: optionsObject.debug,\n                                tracing: optionsObject.tracing,\n                                cacheControl: optionsObject.cacheControl,\n                            };\n                            if (optionsObject.formatParams) {\n                                params = optionsObject.formatParams(params);\n                            }\n                            return runQuery_1.runQuery(params);\n                        }\n                        catch (e) {\n                            if (e.name === 'HttpQueryError') {\n                                return Promise.reject(e);\n                            }\n                            return Promise.resolve({ errors: [formatErrorFn(e)] });\n                        }\n                    });\n                    return [4, Promise.all(requests)];\n                case 5:\n                    responses = _a.sent();\n                    if (!isBatch) {\n                        gqlResponse = responses[0];\n                        if (gqlResponse.errors && typeof gqlResponse.data === 'undefined') {\n                            throw new HttpQueryError(400, JSON.stringify(gqlResponse), true, {\n                                'Content-Type': 'application/json',\n                            });\n                        }\n                        return [2, JSON.stringify(gqlResponse)];\n                    }\n                    return [2, JSON.stringify(responses)];\n            }\n        });\n    });\n}\nexports.runHttpQuery = runHttpQuery;\n//# sourceMappingURL=runHttpQuery.js.map"]},"metadata":{},"sourceType":"script"}