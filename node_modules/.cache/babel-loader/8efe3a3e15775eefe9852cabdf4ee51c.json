{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [0, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar apollo_server_core_1 = require(\"apollo-server-core\");\n\nvar GraphiQL = require(\"apollo-server-module-graphiql\");\n\nfunction graphqlLambda(options) {\n  var _this = this;\n\n  if (!options) {\n    throw new Error('Apollo Server requires options.');\n  }\n\n  if (arguments.length > 1) {\n    throw new Error(\"Apollo Server expects exactly one argument, got \" + arguments.length);\n  }\n\n  var graphqlHandler = function (event, lambdaContext, callback) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var query, statusCode, gqlResponse, headers, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            query = event.httpMethod === 'POST' ? event.body : event.queryStringParameters, statusCode = null, gqlResponse = null, headers = {};\n\n            if (query && typeof query === 'string') {\n              query = JSON.parse(query);\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3, 4, 5]);\n\n            return [4, apollo_server_core_1.runHttpQuery([event, lambdaContext], {\n              method: event.httpMethod,\n              options: options,\n              query: query\n            })];\n\n          case 2:\n            gqlResponse = _a.sent();\n            headers['Content-Type'] = 'application/json';\n            statusCode = 200;\n            return [3, 5];\n\n          case 3:\n            error_1 = _a.sent();\n\n            if ('HttpQueryError' !== error_1.name) {\n              throw error_1;\n            }\n\n            headers = error_1.headers;\n            statusCode = error_1.statusCode;\n            gqlResponse = error_1.message;\n            return [3, 5];\n\n          case 4:\n            callback(null, {\n              statusCode: statusCode,\n              headers: headers,\n              body: gqlResponse\n            });\n            return [7];\n\n          case 5:\n            return [2];\n        }\n      });\n    });\n  };\n\n  return graphqlHandler;\n}\n\nexports.graphqlLambda = graphqlLambda;\n\nfunction graphiqlLambda(options) {\n  var graphiqlHandler = function (event, lambdaContext, callback) {\n    var query = event.queryStringParameters;\n    GraphiQL.resolveGraphiQLString(query, options, event, lambdaContext).then(function (graphiqlString) {\n      callback(null, {\n        statusCode: 200,\n        headers: {\n          'Content-Type': 'text/html'\n        },\n        body: graphiqlString\n      });\n    }, function (error) {\n      callback(null, {\n        statusCode: 500,\n        body: error.message\n      });\n    });\n  };\n\n  return graphiqlHandler;\n}\n\nexports.graphiqlLambda = graphiqlLambda;","map":{"version":3,"sources":["../src/lambdaApollo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar apollo_server_core_1 = require(\"apollo-server-core\");\nvar GraphiQL = require(\"apollo-server-module-graphiql\");\nfunction graphqlLambda(options) {\n    var _this = this;\n    if (!options) {\n        throw new Error('Apollo Server requires options.');\n    }\n    if (arguments.length > 1) {\n        throw new Error(\"Apollo Server expects exactly one argument, got \" + arguments.length);\n    }\n    var graphqlHandler = function (event, lambdaContext, callback) { return __awaiter(_this, void 0, void 0, function () {\n        var query, statusCode, gqlResponse, headers, error_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    query = event.httpMethod === 'POST' ? event.body : event.queryStringParameters, statusCode = null, gqlResponse = null, headers = {};\n                    if (query && typeof query === 'string') {\n                        query = JSON.parse(query);\n                    }\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, 4, 5]);\n                    return [4, apollo_server_core_1.runHttpQuery([event, lambdaContext], {\n                            method: event.httpMethod,\n                            options: options,\n                            query: query,\n                        })];\n                case 2:\n                    gqlResponse = _a.sent();\n                    headers['Content-Type'] = 'application/json';\n                    statusCode = 200;\n                    return [3, 5];\n                case 3:\n                    error_1 = _a.sent();\n                    if ('HttpQueryError' !== error_1.name) {\n                        throw error_1;\n                    }\n                    headers = error_1.headers;\n                    statusCode = error_1.statusCode;\n                    gqlResponse = error_1.message;\n                    return [3, 5];\n                case 4:\n                    callback(null, {\n                        statusCode: statusCode,\n                        headers: headers,\n                        body: gqlResponse,\n                    });\n                    return [7];\n                case 5: return [2];\n            }\n        });\n    }); };\n    return graphqlHandler;\n}\nexports.graphqlLambda = graphqlLambda;\nfunction graphiqlLambda(options) {\n    var graphiqlHandler = function (event, lambdaContext, callback) {\n        var query = event.queryStringParameters;\n        GraphiQL.resolveGraphiQLString(query, options, event, lambdaContext).then(function (graphiqlString) {\n            callback(null, {\n                statusCode: 200,\n                headers: {\n                    'Content-Type': 'text/html',\n                },\n                body: graphiqlString,\n            });\n        }, function (error) {\n            callback(null, {\n                statusCode: 500,\n                body: error.message,\n            });\n        });\n    };\n    return graphiqlHandler;\n}\nexports.graphiqlLambda = graphiqlLambda;\n//# sourceMappingURL=lambdaApollo.js.map"]},"metadata":{},"sourceType":"script"}